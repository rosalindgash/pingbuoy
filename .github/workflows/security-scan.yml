name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 1' # Weekly on Mondays

jobs:
  secrets-and-security:
    runs-on: ubuntu-latest
    name: Secrets and Security Scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: false

      - name: Run ESLint security rules
        run: npx eslint . --ext .ts,.tsx,.js,.jsx --format json --output-file eslint-report.json || true

      - name: Install Semgrep
        run: |
          pip install semgrep

      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json .
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@6e7b396d5b2930facb82b8edc9ea3a8ec461de15 # master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets with TruffleHog
        uses: trufflesecurity/trufflehog@74ebe28b8d6b8bd28bbf0a7b6b1c1b9f3c0d2d6c # main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

      - name: Run Gitleaks secrets scan
        uses: gitleaks/gitleaks-action@cb7149f28d0bf8bd7a4b634e22e0d4804e6c8647 # v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: false

      - name: Supply Chain Security - SBOM Generation
        run: |
          npm install -g @cyclonedx/cyclonedx-npm
          cyclonedx-npm --output-format json --output-file sbom.json

      - name: Supply Chain Security - License Check
        run: |
          npm install -g license-checker
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Apache-2.0 WITH LLVM-exception' --excludePrivatePackages

      - name: AI/ML Security Scan (if applicable)
        run: |
          # Check for potential AI/ML security issues
          grep -r "openai\|anthropic\|claude\|gpt\|llm\|ml\|ai" src/ || echo "No AI/ML code detected"
        continue-on-error: true

      - name: Upload security scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            eslint-report.json
            semgrep-report.json
            trivy-results.sarif
            sbom.json

  commit-verification:
    name: Commit Signature Verification
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Verify commit signatures
      run: |
        echo "üîç Checking commit signatures..."

        # Get the base branch and current branch (sanitized to prevent injection)
        BASE_BRANCH="$(echo '${{ github.event.pull_request.base.ref }}' | sed 's/[^a-zA-Z0-9/_-]//g')"
        HEAD_BRANCH="$(echo '${{ github.event.pull_request.head.ref }}' | sed 's/[^a-zA-Z0-9/_-]//g')"

        # Get commits in this PR
        COMMITS=$(git log --format="%H" origin/$BASE_BRANCH..HEAD)

        UNSIGNED_COMMITS=""
        TOTAL_COMMITS=0
        SIGNED_COMMITS=0

        for commit in $COMMITS; do
          TOTAL_COMMITS=$((TOTAL_COMMITS + 1))

          # Check if commit is signed
          if git verify-commit $commit 2>/dev/null; then
            echo "‚úÖ $commit is signed"
            SIGNED_COMMITS=$((SIGNED_COMMITS + 1))
          else
            echo "‚ùå $commit is NOT signed"
            UNSIGNED_COMMITS="$UNSIGNED_COMMITS $commit"
          fi
        done

        echo ""
        echo "üìä Commit Signature Summary:"
        echo "Total commits: $TOTAL_COMMITS"
        echo "Signed commits: $SIGNED_COMMITS"
        echo "Unsigned commits: $((TOTAL_COMMITS - SIGNED_COMMITS))"

        # For now, we'll warn but not fail on unsigned commits
        # Change this to exit 1 to enforce signing
        if [ -n "$UNSIGNED_COMMITS" ]; then
          echo ""
          echo "‚ö†Ô∏è  Warning: Some commits are not signed."
          echo "Consider signing your commits for better security."
          echo "See: https://docs.github.com/en/authentication/managing-commit-signature-verification"
          echo ""
          echo "Unsigned commits:"
          for commit in $UNSIGNED_COMMITS; do
            echo "  - $(git log --oneline -1 $commit)"
          done

          # Uncomment the next line to enforce commit signing
          # exit 1
        else
          echo "üéâ All commits are properly signed!"
        fi

    - name: Comment on PR with signature status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          let message = 'üîê **Commit Signature Check**\n\n';

          // Read the step output to determine if commits are signed
          const steps = context.payload.workflow_run?.jobs?.[0]?.steps || [];
          const signatureStep = steps.find(step => step.name === 'Verify commit signatures');

          if (signatureStep?.conclusion === 'success') {
            message += '‚úÖ All commits in this PR are properly signed!\n\n';
            message += 'Thank you for following security best practices.';
          } else {
            message += '‚ö†Ô∏è Some commits in this PR are not signed.\n\n';
            message += 'While not currently required, signing commits adds an extra layer of security.\n\n';
            message += '**How to sign commits:**\n';
            message += '1. [Set up GPG key](https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key)\n';
            message += '2. [Configure Git signing](https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key)\n';
            message += '3. Use `git commit -S` for signed commits\n';
            message += '4. Enable automatic signing: `git config --global commit.gpgsign true`';
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });